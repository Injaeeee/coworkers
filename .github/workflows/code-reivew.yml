name: Code Review with ChatGPT

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    # if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Korean
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: GPT-4o # https://platform.openai.com/docs/models
          PROMPT: following code diff 에서 confusions, irregularities, 개선할 점이 있는지 확인하고 어떻게 개선할지 제시해. 필요한 모든 기능이 정상적으로 동작하는지 테스트해. 코드가 Next.js, React의 베스트 프랙티스에 맞게 작성되었는지 확인해. Tailwind CSS가 적절히 사용되었는지 확인해 주세요. 불필요하게 복잡한 클래스가 없는지 체크해 주세요. 컴포넌트 구조가 일관성 있게 설계되었는지, 지나치게 복잡하지는 않은지 확인해 주세요. Zustand를 사용한 상태 관리가 적절하게 적용되었는지 확인해 주세요. 상태가 전역적으로 필요한 곳에서만 관리되는지, 불필요하게 많은 상태가 전역으로 관리되지 않는지 체크해 주세요. TanStack Query와 Axios를 사용해 데이터를 적절하게 가져오고 캐싱하고 있는지 확인해 주세요. 에러 처리와 로딩 상태가 잘 관리되고 있는지 확인하세요. 비동기 로직이 이해하기 쉽게 작성되었는지 체크해 주세요. 불필요한 렌더링이 발생하지 않도록 코드가 잘 최적화되어 있는지 확인해 주세요. Tailwind CSS를 사용할 때, 반응형 디자인이 적절하게 구현되었는지 확인해 주세요. TanStack Query를 사용할 때 캐싱 전략이 적절한지 확인해주세요. Axios로 데이터를 요청할 때 CORS, API 키 등 보안 관련 이슈가 잘 처리되었는지 확인해 주세요. 잠재적인 에러 처리가 적절하게 이루어졌는지 체크하세요. # example: Please check if there are any confusions or irregularities in the following code diff:
          top_p: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p
          temperature: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature
          max_tokens: 10000
          MAX_PATCH_LENGTH: 10000 # if the patch/diff length is large than MAX_PATCH_LENGTH, will be ignored and won't review. By default, with no MAX_PATCH_LENGTH set, there is also no limit for the patch/diff length.
